//Author : Pierre-Aime IMBERT
//mosaicgui.imbert@sfr.fr
//GPLv3 licence

//Main GUI and program of Mosaic_GUI

package mosaic_gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Math.ceil;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Mosaic_GUI extends javax.swing.JFrame 
    {
    static JFrame f;
    static BufferedImage ChoixPhoto=null;
    static JLabel label=null;
    static JFrame frame1;
    static JLabel JLabel11;
    static int nombrecouleurs=0;
    static int palette_couleurs[][] = new int[255][4];
    static String palette_noms[][] = new String[255][1];
    static Image i;
    static int lang=1;
    static int filepal=0;
    static File fileinfo;
    
    public Mosaic_GUI() throws IOException 
        {
        f = new JFrame();
        i = ImageIO.read(getClass().getResource("/mosaic_gui/icon.png"));
        setIconImage(i);
        initComponents();
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mosaic_GUI V2.1");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel1.setText("Version 2.1. Courriel : mosaicgui.imbert@gmail.com");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Etape 1 : Charger une image");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Etape 2 : Définir la palette à utiliser");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Etape 3 : Définir les paramètres de votre projet");

        jButton1.setText("Ouvrir une image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ouvrir une palette");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("   ");
        jLabel5.setToolTipText("");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Etape 4 : Choix du filtre pour générer votre patron");

        jButton3.setText("Figurines");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Photos");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Longueur maximale de votre projet (en mm) :");

        jLabel8.setText("Taille des perles, mosaiques... (en mm) :");

        jTextField1.setText("2.5");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                key1(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                key1(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                key1(evt);
            }
        });

        jTextField2.setText("0");
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                key1(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                key1(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                key1(evt);
            }
        });

        jLabel9.setText("Taiile des patrons (en nombre de motifs par ligne et colonne) :");

        jTextField3.setText("0");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                key2(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                key2(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                key2(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mosaic_gui/icon.png"))); // NOI18N

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mosaic_gui/fr.png"))); // NOI18N
        jButton5.setText("FR");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mosaic_gui/us.png"))); // NOI18N
        jButton6.setText("US");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel11.setText("(0 = taille originale. Idéal pour le mode \"Figurines\")");

        jLabel12.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel12.setText("IMBERT PIERRE-AIME");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(32, 56, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton2))
                .addGap(8, 8, 8)
                .addComponent(jLabel5)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel10))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        final JFileChooser fc = new JFileChooser();
        if (lang==1) 
            {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Images (*.jpg, *.png, *.tif, *.tiff, *.gif)", "jpg", "png", "tif", "tiff", "gif");
            fc.setFileFilter(filter);
            fc.setDialogTitle("Choisissez une image pour votre projet");
            }
        else if (lang==2) 
            {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Pictures (*.jpg, *.png, *.tif, *.tiff, *.gif)", "jpg", "png", "tif", "tiff", "gif");
            fc.setFileFilter(filter);
            fc.setDialogTitle("Choose a picture for your project");
            }
        fc.setAcceptAllFileFilterUsed(false);
        
        int returnVal = fc.showOpenDialog(fc);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
            try 
                {
                File file = fc.getSelectedFile();
                
                BufferedImage carac=ImageIO.read(file);
                
                if(carac.getHeight()<151 && carac.getWidth()<151)
                    {
                    File outputfile = new File(System.getProperty("user.home")+"\\thumbnail.png");
                    try {
                        ImageIO.write(carac, "png", outputfile);
                        } catch (IOException ex) {
                        Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                
                else if(carac.getHeight()>1000 && carac.getHeight()<=carac.getWidth())
                    {
                    float factor=(float)1000/(float)carac.getHeight();
                    float width=(float)carac.getWidth()*factor;
                    float height=(float)carac.getHeight()*factor;
                    Image scaledImg = carac.getScaledInstance((int)width, (int)height, Image.SCALE_SMOOTH);
                    BufferedImage thumbnail = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_ARGB);
                    thumbnail.createGraphics().drawImage(scaledImg,0,0,null);
                                      
                    Cropping test = new Cropping(thumbnail);
                    ClipMover mover = new ClipMover(test);
                    test.addMouseListener(mover);
                    test.addMouseMotionListener(mover);
                    f = new JFrame();
                    f.setIconImage(i);
                    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    f.setResizable(false);
                    f.getContentPane().add(new JScrollPane(test));
                    f.getContentPane().add(test.getUIPanel(), "South");
                    if (lang==1) f.setTitle("Selectionnez la zone de votre image souhaitée");
                    else if (lang==2) f.setTitle("Crop an area of your picture");
                    if(carac.getWidth()>700 && carac.getHeight()>700) f.setSize(700,700);
                    else if(carac.getWidth()>700) f.setSize(700,carac.getHeight()+75);
                    else if(carac.getHeight()>700) f.setSize(carac.getWidth()+15,700);
                    else f.setSize(carac.getWidth()+15,carac.getHeight()+75);
                    f.setLocation(0,0);
                    f.setVisible(true);
                    }
                
                else if(carac.getWidth()>1000 && carac.getHeight()>=carac.getWidth())
                    {
                    float factor=(float)1000/(float)carac.getWidth();
                    float width=(float)carac.getWidth()*factor;
                    float height=(float)carac.getHeight()*factor;
                    Image scaledImg = carac.getScaledInstance((int)width, (int)height, Image.SCALE_SMOOTH);
                    BufferedImage thumbnail = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_ARGB);
                    thumbnail.createGraphics().drawImage(scaledImg,0,0,null);
                                      
                    Cropping test = new Cropping(thumbnail);
                    ClipMover mover = new ClipMover(test);
                    test.addMouseListener(mover);
                    test.addMouseMotionListener(mover);
                    f = new JFrame();
                    f.setIconImage(i);
                    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    f.setResizable(false);
                    f.getContentPane().add(new JScrollPane(test));
                    f.getContentPane().add(test.getUIPanel(), "South");
                    if (lang==1) f.setTitle("Selectionnez la zone de votre image souhaitée");
                    else if (lang==2) f.setTitle("Crop an area of your picture");
                    if(carac.getWidth()>700 && carac.getHeight()>700) f.setSize(700,700);
                    else if(carac.getWidth()>700) f.setSize(700,carac.getHeight()+75);
                    else if(carac.getHeight()>700) f.setSize(carac.getWidth()+15,700);
                    else f.setSize(carac.getWidth()+15,carac.getHeight()+75);
                    f.setLocation(0,0);
                    f.setVisible(true);
                    }
                
                else
                    {
                    Cropping test = new Cropping(carac);
                    ClipMover mover = new ClipMover(test);
                    test.addMouseListener(mover);
                    test.addMouseMotionListener(mover);
                    f = new JFrame();
                    f.setIconImage(i);
                    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    f.setResizable(false);
                    f.getContentPane().add(new JScrollPane(test));
                    f.getContentPane().add(test.getUIPanel(), "South");
                    if (lang==1) f.setTitle("Selectionnez la zone de votre image souhaitée");
                    else if (lang==2) f.setTitle("Crop an area of your picture");
                    if(carac.getWidth()>700 && carac.getHeight()>700) f.setSize(700,700);
                    else if(carac.getWidth()>700) f.setSize(700,carac.getHeight()+75);
                    else if(carac.getHeight()>700) f.setSize(carac.getWidth()+15,700);
                    else f.setSize(carac.getWidth()+15,carac.getHeight()+75);
                    f.setLocation(0,0);
                    f.setVisible(true);
                    }
                
                } 
            catch (IOException ex) 
                {
                Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } 
        else 
            {
            System.out.println("ABORTED!!!");
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        final JFileChooser fc = new JFileChooser();
        if (lang==1)
            {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Palettes (*.txt)", "txt");
            fc.setFileFilter(filter);
            fc.setDialogTitle("Choisissez une palette de couleurs pour votre projet");
            }
        else if (lang==2)
            {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Color chart (*.txt)", "txt");
            fc.setFileFilter(filter);
            fc.setDialogTitle("Choose your color chart for your project");
            }
        
        fc.setAcceptAllFileFilterUsed(false);
        

        int returnVal = fc.showOpenDialog(fc);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
            File filepalette = fc.getSelectedFile();
 
            Scanner scanner=null;
            String word=null;
            nombrecouleurs=0;
            int red,green,blue=0;
             try 
                {
                scanner = new Scanner(filepalette);
                while (scanner.hasNextLine()) 
                    {
                    nombrecouleurs=nombrecouleurs+1;
                    
                    word = scanner.next();
                    palette_noms[nombrecouleurs-1][0]=word;
                    
                    red = scanner.nextInt();
                    palette_couleurs[nombrecouleurs-1][0]=red;
                    
                    green = scanner.nextInt();
                    palette_couleurs[nombrecouleurs-1][1]=green;
                    
                    blue = scanner.nextInt();
                    palette_couleurs[nombrecouleurs-1][2]=blue;
                    }
                if (lang==1) jLabel5.setText(filepalette.getName()+ " : " + nombrecouleurs + " couleurs disponibles !");
                else if (lang==2) jLabel5.setText(filepalette.getName()+ " : " + nombrecouleurs + " colors available !");
                filepal=1;
                fileinfo=filepalette;
                }
            catch (FileNotFoundException ex) 
                {
                 Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            scanner.close();
            }
        else 
            {
            System.out.println("ABORTED!!!");
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (lang==1)
            {
            fc.setDialogTitle("Choisissez un dossier pour sauvegarder votre projet");
            }
        else if (lang==2)
            {
            fc.setDialogTitle("Choose a directory to save your project");
            }
      
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
            String dir = fc.getSelectedFile() +"\\";
            File file=new File(System.getProperty("user.home")+"\\thumbnail.png");
        
            BufferedImage Choix1;
            try 
                {
                Choix1 = ImageIO.read(file);
                float width=Choix1.getWidth();
                float height=Choix1.getHeight();
                String taillemotifs = jTextField1.getText();
                String longueurpatron = jTextField2.getText();
                
                float tailleprojet=0;
                if(Float.parseFloat(longueurpatron)==0)
                    {
                    System.out.println("Hack sprite enabled!!!!");
                    if(width<height) tailleprojet=height;
                    else tailleprojet=width;
                    }
                else
                    {   
                    tailleprojet = Float.parseFloat(longueurpatron)/Float.parseFloat(taillemotifs);
                    }
                
                if(width<height)
                    {
                    float factor=tailleprojet/height;
                    width=width*factor;
                    height=height*factor;
                    Image scaledImg = Choix1.getScaledInstance((int)width, (int)height, Image.SCALE_SMOOTH);
                    BufferedImage thumbnail = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_ARGB);
                    thumbnail.createGraphics().drawImage(scaledImg,0,0,null);
     
                    BufferedImage Patron = Normal.findNearestColor(thumbnail);
                    
                    File outputfile = new File(dir+"image.png");
                    try 
                        {
                        ImageIO.write(Patron, "png", outputfile);
                        } 
                    catch (IOException ex) 
                        {
                        Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                    //Compter les pixels des palettes
                    for(int o=0;o<nombrecouleurs;o++)
                        {
                        palette_couleurs[o][3]=0;
                        }
                    for (int i=0;i<Patron.getHeight();i++)
                        {
                        for (int j=0;j<Patron.getWidth();j++) 
                            {
                            int bestindex=0;
                            int minDistanceSquared = 255*255 + 255*255 + 255*255 + 1;
                            for (int k=0;k<nombrecouleurs;k++)
                                {  
                                Color mycolor = new Color(Patron.getRGB(j, i));
                                int Alpha = Patron.getRGB(j,i)>>24&0xFF;
                                int Rdiff = mycolor.getRed();
                                int Gdiff = mycolor.getGreen();
                                int Bdiff = mycolor.getBlue();
                    
                                if (Alpha==255 && Rdiff==palette_couleurs[k][0] && Gdiff==palette_couleurs[k][1] && Bdiff==palette_couleurs[k][2])
                                    {
                                    palette_couleurs[k][3]=palette_couleurs[k][3]+1;
                                    }
                                }
                            }
                        }
                        
                    file = new File(dir+"index.html");
                    if (!file.exists()) 
                        {
			file.createNewFile();
			}
                    
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    
                    String content = "<html>";
                    bw.write(content + "\r\n");
                    content = "<head>";
                    bw.write(content + "\r\n");
                    content = "</head>";
                    bw.write(content + "\r\n");
                    content = "<body>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h1 style='text-align: center;'>Patron avec Mosaic GUI V2.1</h1>";
                    else if (lang==2) content = "<h1 style='text-align: center;'>Pattern with Mosaic GUI V2.1</h1>";
                    bw.write(content + "\r\n");
                    content = "<p style='text-align: center;'><img src=./image.png></p>";
                    bw.write(content + "\r\n");
                    String temp = jTextField1.getText();
                    float xxx = Float.parseFloat(temp);
                    xxx=Patron.getWidth()*xxx;
                    float yyy = Float.parseFloat(temp);
                    yyy=Patron.getHeight()*yyy;
                    if (lang==1) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Taille du projet : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net'>Aller au site officiel</a></p>";
                    else if (lang==2) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Size of your project : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net/indexen.html'>Go to the official website</a></p>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h2>Palette :</h2>";
                    else if (lang==2) content = "<h2>Color chart :</h2>";
                    bw.write(content + "\r\n");
                    content = "<p>";
                    bw.write(content);
                    int nbpixels=0;
                    
                    int total=0;
                    for (int k=0;k<nombrecouleurs;k++)
                        {
                        total=total+palette_couleurs[k][3];
                        if(k==nombrecouleurs-1)
                            {
                            content = "<p><font style='text-decoration: underline;'> TOTAL </font>: " + total + "</p>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    for (int k=0;k<nombrecouleurs;k++)
                        {  
                        if (palette_couleurs[k][3]!=0 && k+1<10)
                            {
                            int n=k+1;
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (0" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        else if (palette_couleurs[k][3]!=0)
                            {
                            int n=k+1;    
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        if (nbpixels==5)
                            {
                            nbpixels=0;
                            bw.write("<br>" + "\r\n");
                            }
                        }
                    content = "</p>";
                    bw.write(content + "\r\n");
                    
                    String tpatrons = jTextField3.getText();
                    float taillepatron = Float.parseFloat(tpatrons);
                    
                    float xx=Patron.getWidth()/taillepatron;
                    float yy=Patron.getHeight()/taillepatron;
                    int xfois=(int) ceil(xx);
                    int yfois=(int) ceil(yy);
                    
                    for(int m=0;m<yfois;m++)
                        {
                        for(int n=0;n<xfois;n++)
                            {
                            int ll=m+1;
                            int cc=n+1;
                            if (lang==1) content = "<h2>Ligne " + ll +" Colonne "+ cc +"</h2>";
                            if (lang==2) content = "<h2>Line " + ll +" Column "+ cc +"</h2>";
                            bw.write(content + "\r\n");    
                            content = "<table border='1'>";
                            bw.write(content + "\r\n");
                            for(int i=(int)taillepatron*m;i<taillepatron*m+taillepatron;i++)
                                {
                                content="<tr>";
                                bw.write(content + "\r\n");
                                for(int j=(int)taillepatron*n;j<(int)taillepatron*n+taillepatron;j++)
                                    {
                                    if(j<Patron.getWidth() && i<Patron.getHeight())
                                        {
                                        Color color=new Color(Patron.getRGB(j, i));
                                        int Alpha = Patron.getRGB(j,i)>>24&0xFF;
                                        int rcolor = color.getRed();
                                        int gcolor = color.getGreen();
                                        int bcolor = color.getBlue();
                                        if(Alpha==255)
                                            {
                                            for (int k=0;k<nombrecouleurs;k++)
                                                {
                                                if(palette_couleurs[k][0]==rcolor && palette_couleurs[k][1]==gcolor && palette_couleurs[k][2]==bcolor)
                                                    {
                                                    int l=k+1;
                                                    if(l<10)
                                                        {
                                                        if(rcolor<170 && gcolor<170 && bcolor<170)
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>0"+l+"</font></td>"+"\r\n");
                                                            }
                                                        else
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'>0"+l+"</td>"+"\r\n");
                                                            }
                                                        }
                                                    else
                                                        {
                                                        if(rcolor<170 && gcolor<170 && bcolor<170)
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>"+l+"</font></td>"+"\r\n");
                                                            }
                                                        else
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px;'>"+l+"</td>"+"\r\n");
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        else
                                            {
                                            bw.write("<td style='font-size: 10px; width:10px; height:10px; font-weight:bold;'><font color='#FFFFFF'>X</font></td>"+"\r\n");
                                            }
                                        }
                                    else
                                        {
                                        bw.write("<td style='font-size: 10px; width:10px; height:10px; font-weight:bold;'><font color='#FFFFF'>X</font></td>"+"\r\n");
                                        }
                                    }
                                content="</tr>";
                                bw.write(content + "\r\n");
                                }
                            content="</table>";
                            bw.write(content + "\r\n");
                            content="<br><br>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    content="</body>";
                    bw.write(content + "\r\n");
                    content="</html>";
                    bw.write(content + "\r\n");
                    bw.close();
                    }
                else
                    {
                    float factor=tailleprojet/width;
                    width=width*factor;
                    height=height*factor;
                    Image scaledImg = Choix1.getScaledInstance((int)width, (int)height, Image.SCALE_SMOOTH);
                    BufferedImage thumbnail = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_ARGB);
                    thumbnail.createGraphics().drawImage(scaledImg,0,0,null);
     
                    BufferedImage Patron = Normal.findNearestColor(thumbnail);
                    
                    File outputfile = new File(dir+"image.png");
                    try 
                        {
                        ImageIO.write(Patron, "png", outputfile);
                        } 
                    catch (IOException ex) 
                        {
                        Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                    for(int o=0;o<nombrecouleurs;o++)
                        {
                        palette_couleurs[o][3]=0;
                        }
                    for (int i=0;i<Patron.getHeight();i++)
                        {
                        for (int j=0;j<Patron.getWidth();j++) 
                            {
                            int bestindex=0;
                            int minDistanceSquared = 255*255 + 255*255 + 255*255 + 1;
                            for (int k=0;k<nombrecouleurs;k++)
                                {  
                                Color mycolor = new Color(Patron.getRGB(j, i));
                                int Alpha = Patron.getRGB(j,i)>>24&0xFF;
                                int Rdiff = mycolor.getRed();
                                int Gdiff = mycolor.getGreen();
                                int Bdiff = mycolor.getBlue();
                    
                                if (Alpha==255 && Rdiff==palette_couleurs[k][0] && Gdiff==palette_couleurs[k][1] && Bdiff==palette_couleurs[k][2])
                                    {
                                    palette_couleurs[k][3]=palette_couleurs[k][3]+1;
                                    }
                                }
                            }
                        }
                        
                    file = new File(dir+"index.html");
                    if (!file.exists()) 
                        {
			file.createNewFile();
			}
                    
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    
                    String content = "<html>";
                    bw.write(content + "\r\n");
                    content = "<head>";
                    bw.write(content + "\r\n");
                    content = "</head>";
                    bw.write(content + "\r\n");
                    content = "<body>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h1 style='text-align: center;'>Patron avec Mosaic GUI V2.1</h1>";
                    else if (lang==2) content = "<h1 style='text-align: center;'>Pattern with Mosaic GUI V2.1</h1>";
                    bw.write(content + "\r\n");
                    content = "<p style='text-align: center;'><img src=./image.png></p>";
                    bw.write(content + "\r\n");
                    String temp = jTextField1.getText();
                    float xxx = Float.parseFloat(temp);
                    xxx=Patron.getWidth()*xxx;
                    float yyy = Float.parseFloat(temp);
                    yyy=Patron.getHeight()*yyy;
                    if (lang==1) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Taille du projet : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net'>Aller au site officiel</a></p>";
                    else if (lang==2) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Size of your project : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net/indexen.html'>Go to the official website</a></p>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h2>Palette :</h2>";
                    else if (lang==2) content = "<h2>Color chart :</h2>";
                    bw.write(content + "\r\n");
                    content = "<p>";
                    bw.write(content);
                    int nbpixels=0;
                    
                    int total=0;
                    for (int k=0;k<nombrecouleurs;k++)
                        {
                        total=total+palette_couleurs[k][3];
                        if(k==nombrecouleurs-1)
                            {
                            content = "<p><font style='text-decoration: underline;'> TOTAL </font>: " + total + "</p>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    for (int k=0;k<nombrecouleurs;k++)
                        {  
                        if (palette_couleurs[k][3]!=0 && k+1<10)
                            {
                            int n=k+1;
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (0" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        else if (palette_couleurs[k][3]!=0)
                            {
                            int n=k+1;    
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        if (nbpixels==5)
                            {
                            nbpixels=0;
                            bw.write("<br>" + "\r\n");
                            }
                        }
                    content = "</p>";
                    bw.write(content + "\r\n");
                    
                    String tpatrons = jTextField3.getText();
                    float taillepatron = Float.parseFloat(tpatrons);
                    
                    float xx=Patron.getWidth()/taillepatron;
                    float yy=Patron.getHeight()/taillepatron;
                    int xfois=(int) ceil(xx);
                    int yfois=(int) ceil(yy);
                    
                    for(int m=0;m<yfois;m++)
                        {
                        for(int n=0;n<xfois;n++)
                            {
                            int ll=m+1;
                            int cc=n+1;
                            if (lang==1) content = "<h2>Ligne " + ll +" Colonne "+ cc +"</h2>";
                            if (lang==2) content = "<h2>Line " + ll +" Column "+ cc +"</h2>";
                            bw.write(content + "\r\n");    
                            content = "<table border='1'>";
                            bw.write(content + "\r\n");
                            for(int i=(int)taillepatron*m;i<taillepatron*m+taillepatron;i++)
                                {
                                content="<tr>";
                                bw.write(content + "\r\n");
                                for(int j=(int)taillepatron*n;j<(int)taillepatron*n+taillepatron;j++)
                                    {
                                    if(j<Patron.getWidth() && i<Patron.getHeight())
                                        {
                                        Color color=new Color(Patron.getRGB(j, i));
                                        int Alpha = Patron.getRGB(j,i)>>24&0xFF;
                                        int rcolor = color.getRed();
                                        int gcolor = color.getGreen();
                                        int bcolor = color.getBlue();
                                        if(Alpha==255)
                                            {
                                            for (int k=0;k<nombrecouleurs;k++)
                                                {
                                                if(palette_couleurs[k][0]==rcolor && palette_couleurs[k][1]==gcolor && palette_couleurs[k][2]==bcolor)
                                                    {
                                                    int l=k+1;
                                                    if(l<10)
                                                        {
                                                        if(rcolor<170 && gcolor<170 && bcolor<170)
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>0"+l+"</font></td>"+"\r\n");
                                                            }
                                                        else
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'>0"+l+"</td>"+"\r\n");
                                                            }
                                                        }
                                                    else
                                                        {
                                                        if(rcolor<170 && gcolor<170 && bcolor<170)
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>"+l+"</font></td>"+"\r\n");
                                                            }
                                                        else
                                                            {
                                                            String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                            bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px;'>"+l+"</td>"+"\r\n");
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        else
                                            {
                                            bw.write("<td style='font-size: 10px; width:10px; height:10px; font-weight:bold;'><font color='#FFFFFF'>X</font></td>"+"\r\n");
                                            }
                                        }
                                    else
                                        {
                                        bw.write("<td style='font-size: 10px; width:10px; height:10px; font-weight:bold;'><font color='#FFFFF'>X</font></td>"+"\r\n");
                                        }
                                    }
                                content="</tr>";
                                bw.write(content + "\r\n");
                                }
                            content="</table>";
                            bw.write(content + "\r\n");
                            content="<br><br>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    content="</body>";
                    bw.write(content + "\r\n");
                    content="</html>";
                    bw.write(content + "\r\n");
                    bw.close();
                    }
                } 
            catch (IOException ex) 
                {
                Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        else
            {
            System.out.println("ABORTED!!!");
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (lang==1)
            {
            fc.setDialogTitle("Choisissez un dossier pour sauvegarder votre projet");
            }
        else if (lang==2)
            {
            fc.setDialogTitle("Choose a directory to save your project");
            }
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
            String dir = fc.getSelectedFile() +"\\";
            File file=new File(System.getProperty("user.home")+"\\thumbnail.png");
        
            BufferedImage Choix1;
            try 
                {
                Choix1 = ImageIO.read(file);
                float width=Choix1.getWidth();
                float height=Choix1.getHeight();
                String taillemotifs = jTextField1.getText();
                String longueurpatron = jTextField2.getText();

                float tailleprojet=0;
                if(Float.parseFloat(longueurpatron)==0)
                    {
                    System.out.println("Hack sprite enabled!!!!");
                    if(width<height) tailleprojet=height;
                    else tailleprojet=width;
                    }
                else
                    {   
                    tailleprojet = Float.parseFloat(longueurpatron)/Float.parseFloat(taillemotifs);
                    }
                        
                if(width<height)
                    {
                    float factor=tailleprojet/height;
                    width=width*factor;
                    height=height*factor;
                    Image scaledImg = Choix1.getScaledInstance((int)width, (int)height, Image.SCALE_SMOOTH);
                    BufferedImage thumbnail = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_ARGB);
                    thumbnail.createGraphics().drawImage(scaledImg,0,0,null);
     
                    BufferedImage Patron = Floyd.floydSteinbergDithering(thumbnail);
                    
                    File outputfile = new File(dir+"image.png");
                    try 
                        {
                        ImageIO.write(Patron, "png", outputfile);
                        } 
                    catch (IOException ex) 
                        {
                        Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                    for(int o=0;o<nombrecouleurs;o++)
                        {
                        palette_couleurs[o][3]=0;
                        }
                    for (int i=0;i<Patron.getHeight();i++)
                        {
                        for (int j=0;j<Patron.getWidth();j++) 
                            {
                            int bestindex=0;
                            int minDistanceSquared = 255*255 + 255*255 + 255*255 + 1;
                            for (int k=0;k<nombrecouleurs;k++)
                                {  
                                Color mycolor = new Color(Patron.getRGB(j, i));
                                int Rdiff = mycolor.getRed();
                                int Gdiff = mycolor.getGreen();
                                int Bdiff = mycolor.getBlue();
                    
                                if (Rdiff==palette_couleurs[k][0] && Gdiff==palette_couleurs[k][1] && Bdiff==palette_couleurs[k][2])
                                    {
                                    palette_couleurs[k][3]=palette_couleurs[k][3]+1;
                                    }
                                }
                            }
                        }
                        
                    file = new File(dir+"index.html");
                    if (!file.exists()) 
                        {
			file.createNewFile();
			}
                    
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    
                    String content = "<html>";
                    bw.write(content + "\r\n");
                    content = "<head>";
                    bw.write(content + "\r\n");
                    content = "</head>";
                    bw.write(content + "\r\n");
                    content = "<body>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h1 style='text-align: center;'>Patron avec Mosaic GUI V2.1</h1>";
                    else if (lang==2) content = "<h1 style='text-align: center;'>Pattern with Mosaic GUI V2.1</h1>";
                    bw.write(content + "\r\n");
                    content = "<p style='text-align: center;'><img src=./image.png></p>";
                    bw.write(content + "\r\n");
                    String temp = jTextField1.getText();
                    float xxx = Float.parseFloat(temp);
                    xxx=Patron.getWidth()*xxx;
                    float yyy = Float.parseFloat(temp);
                    yyy=Patron.getHeight()*yyy;
                    if (lang==1) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Taille du projet : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net'>Aller au site officiel</a></p>";
                    else if (lang==2) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Size of your project : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net/indexen.html'>Go to the official website</a></p>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h2>Palette :</h2>";
                    else if (lang==2) content = "<h2>Color chart :</h2>";
                    bw.write(content + "\r\n");
                    content = "<p>";
                    bw.write(content);
                    int nbpixels=0;
                    
                    int total=0;
                    for (int k=0;k<nombrecouleurs;k++)
                        {
                        total=total+palette_couleurs[k][3];
                        if(k==nombrecouleurs-1)
                            {
                            content = "<p><font style='text-decoration: underline;'> TOTAL </font>: " + total + "</p>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    for (int k=0;k<nombrecouleurs;k++)
                        {  
                        if (palette_couleurs[k][3]!=0 && k+1<10)
                            {
                            int n=k+1;
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (0" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        else if (palette_couleurs[k][3]!=0)
                            {
                            int n=k+1;    
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        if (nbpixels==5)
                            {
                            nbpixels=0;
                            bw.write("<br>" + "\r\n");
                            }
                        }
                    content = "</p>";
                    bw.write(content + "\r\n");
                    
                    String tpatrons = jTextField3.getText();
                    float taillepatron = Float.parseFloat(tpatrons);
                    
                    float xx=Patron.getWidth()/taillepatron;
                    float yy=Patron.getHeight()/taillepatron;
                    int xfois=(int) ceil(xx);
                    int yfois=(int) ceil(yy);
                    
                    for(int m=0;m<yfois;m++)
                        {
                        for(int n=0;n<xfois;n++)
                            {
                            int ll=m+1;
                            int cc=n+1;
                            if (lang==1) content = "<h2>Ligne " + ll +" Colonne "+ cc +"</h2>";
                            if (lang==2) content = "<h2>Line " + ll +" Column "+ cc +"</h2>";
                            bw.write(content + "\r\n");    
                            content = "<table border='1'>";
                            bw.write(content + "\r\n");
                            for(int i=(int)taillepatron*m;i<taillepatron*m+taillepatron;i++)
                                {
                                content="<tr>";
                                bw.write(content + "\r\n");
                                for(int j=(int)taillepatron*n;j<(int)taillepatron*n+taillepatron;j++)
                                    {
                                    if(j<Patron.getWidth() && i<Patron.getHeight())
                                        {
                                        Color color=new Color(Patron.getRGB(j, i));
                                        int rcolor = color.getRed();
                                        int gcolor = color.getGreen();
                                        int bcolor = color.getBlue();
                                        for (int k=0;k<nombrecouleurs;k++)
                                            {
                                            if(palette_couleurs[k][0]==rcolor && palette_couleurs[k][1]==gcolor && palette_couleurs[k][2]==bcolor)
                                                {
                                                int l=k+1;
                                                if(l<10)
                                                    {
                                                    if(rcolor<170 && gcolor<170 && bcolor<170)
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>0"+l+"</font></td>"+"\r\n");
                                                        }
                                                    else
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'>0"+l+"</td>"+"\r\n");
                                                        }
                                                    }
                                                else
                                                    {
                                                    if(rcolor<170 && gcolor<170 && bcolor<170)
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>"+l+"</font></td>"+"\r\n");
                                                        }
                                                    else
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px;'>"+l+"</td>"+"\r\n");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    else
                                        {
                                        bw.write("<td style='font-size: 10px; width:10px; height:10px; font-weight:bold;'><font color='#FFFFFF'>X</font></td>"+"\r\n");
                                        }
                                    }
                                content="</tr>";
                                bw.write(content + "\r\n");
                                }
                            content="</table>";
                            bw.write(content + "\r\n");
                            content="<br><br>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    content="</body>";
                    bw.write(content + "\r\n");
                    content="</html>";
                    bw.write(content + "\r\n");
                    bw.close();
                    }
                else
                    {
                    float factor=tailleprojet/width;
                    width=width*factor;
                    height=height*factor;
                    Image scaledImg = Choix1.getScaledInstance((int)width, (int)height, Image.SCALE_SMOOTH);
                    BufferedImage thumbnail = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_INT_ARGB);
                    thumbnail.createGraphics().drawImage(scaledImg,0,0,null);
     
                    BufferedImage Patron = Floyd.floydSteinbergDithering(thumbnail);
                    
                    File outputfile = new File(dir+"image.png");
                    try 
                        {
                        ImageIO.write(Patron, "png", outputfile);
                        } 
                    catch (IOException ex) 
                        {
                        Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                    for(int o=0;o<nombrecouleurs;o++)
                        {
                        palette_couleurs[o][3]=0;
                        }
                    for (int i=0;i<Patron.getHeight();i++)
                        {
                        for (int j=0;j<Patron.getWidth();j++) 
                            {
                            int bestindex=0;
                            int minDistanceSquared = 255*255 + 255*255 + 255*255 + 1;
                            for (int k=0;k<nombrecouleurs;k++)
                                {  
                                Color mycolor = new Color(Patron.getRGB(j, i));
                                int Rdiff = mycolor.getRed();
                                int Gdiff = mycolor.getGreen();
                                int Bdiff = mycolor.getBlue();
                    
                                if (Rdiff==palette_couleurs[k][0] && Gdiff==palette_couleurs[k][1] && Bdiff==palette_couleurs[k][2])
                                    {
                                    palette_couleurs[k][3]=palette_couleurs[k][3]+1;
                                    }
                                }
                            }
                        }
                        
                    file = new File(dir+"index.html");
                    if (!file.exists()) 
                        {
			file.createNewFile();
			}
                    
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    
                    String content = "<html>";
                    bw.write(content + "\r\n");
                    content = "<head>";
                    bw.write(content + "\r\n");
                    content = "</head>";
                    bw.write(content + "\r\n");
                    content = "<body>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h1 style='text-align: center;'>Patron avec Mosaic GUI V2.1</h1>";
                    else if (lang==2) content = "<h1 style='text-align: center;'>Pattern with Mosaic GUI V2.1</h1>";
                    bw.write(content + "\r\n");
                    content = "<p style='text-align: center;'><img src=./image.png></p>";
                    bw.write(content + "\r\n");
                    String temp = jTextField1.getText();
                    float xxx = Float.parseFloat(temp);
                    xxx=Patron.getWidth()*xxx;
                    float yyy = Float.parseFloat(temp);
                    yyy=Patron.getHeight()*yyy;
                    if (lang==1) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Taille du projet : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net'>Aller au site officiel</a></p>";
                    else if (lang==2) content = "<p style='text-align: center; font-size: 14px; font-style:italic;'>Size of your project : " + xxx + "x" + yyy + " mm.<br><a href='http://mosaicgui.ddns.net/indexen.html'>Go to the official website</a></p>";
                    bw.write(content + "\r\n");
                    if (lang==1) content = "<h2>Palette :</h2>";
                    else if (lang==2) content = "<h2>Color chart :</h2>";
                    bw.write(content + "\r\n");
                    content = "<p>";
                    bw.write(content);
                    int nbpixels=0;
                    
                    int total=0;
                    for (int k=0;k<nombrecouleurs;k++)
                        {
                        total=total+palette_couleurs[k][3];
                        if(k==nombrecouleurs-1)
                            {
                            content = "<p><font style='text-decoration: underline;'> TOTAL </font>: " + total + "</p>";
                            bw.write(content + "\r\n");
                            }
                        }
                    
                    for (int k=0;k<nombrecouleurs;k++)
                        {  
                        if (palette_couleurs[k][3]!=0 && k+1<10)
                            {
                            int n=k+1;
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (0" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        else if (palette_couleurs[k][3]!=0)
                            {
                            int n=k+1;    
                            content = "<font style='text-decoration: underline;'>" + palette_noms[k][0] + " (" + n +") </font>: " + palette_couleurs[k][3] + " ; ";
                            bw.write(content);
                            nbpixels=nbpixels+1;
                            }
                        if (nbpixels==5)
                            {
                            nbpixels=0;
                            bw.write("<br>" + "\r\n");
                            }
                        }
                    content = "</p>";
                    bw.write(content + "\r\n");
                    
                    String tpatrons = jTextField3.getText();
                    float taillepatron = Float.parseFloat(tpatrons);
                    
                    float xx=Patron.getWidth()/taillepatron;
                    float yy=Patron.getHeight()/taillepatron;
                    int xfois=(int) ceil(xx);
                    int yfois=(int) ceil(yy);
                    
                    for(int m=0;m<yfois;m++)
                        {
                        for(int n=0;n<xfois;n++)
                            {
                            int ll=m+1;
                            int cc=n+1;
                            if (lang==1) content = "<h2>Ligne " + ll +" Colonne "+ cc +"</h2>";
                            if (lang==2) content = "<h2>Line " + ll +" Column "+ cc +"</h2>";
                            bw.write(content + "\r\n");    
                            content = "<table border='1'>";
                            bw.write(content + "\r\n");
                            for(int i=(int)taillepatron*m;i<taillepatron*m+taillepatron;i++)
                                {
                                content="<tr>";
                                bw.write(content + "\r\n");
                                for(int j=(int)taillepatron*n;j<(int)taillepatron*n+taillepatron;j++)
                                    {
                                    if(j<Patron.getWidth() && i<Patron.getHeight())
                                        {
                                        Color color=new Color(Patron.getRGB(j, i));
                                        int rcolor = color.getRed();
                                        int gcolor = color.getGreen();
                                        int bcolor = color.getBlue();
                                        for (int k=0;k<nombrecouleurs;k++)
                                            {
                                            if(palette_couleurs[k][0]==rcolor && palette_couleurs[k][1]==gcolor && palette_couleurs[k][2]==bcolor)
                                                {
                                                int l=k+1;
                                                if(l<10)
                                                    {
                                                    if(rcolor<170 && gcolor<170 && bcolor<170)
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>0"+l+"</font></td>"+"\r\n");
                                                        }
                                                    else
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'>0"+l+"</td>"+"\r\n");
                                                        }
                                                    }
                                                else
                                                    {
                                                    if(rcolor<170 && gcolor<170 && bcolor<170)
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px'><font color='#FFFFFF'>"+l+"</font></td>"+"\r\n");
                                                        }
                                                    else
                                                        {
                                                        String hex = String.format("#%02x%02x%02x", rcolor, gcolor, bcolor);
                                                        bw.write("<td bgcolor='"+hex+"' style='font-size: 10px; width:10px; height:10px;'>"+l+"</td>"+"\r\n");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    else
                                        {
                                        bw.write("<td style='font-size: 10px; width:10px; height:10px; font-weight:bold;'><font color='#FFFFFF'>X</font></td>"+"\r\n");
                                        }
                                    }
                                content="</tr>";
                                bw.write(content + "\r\n");
                                }
                            content="</table>";
                            bw.write(content + "\r\n");
                            content="<br><br>";
                            bw.write(content + "\r\n");
                            }
                        }
   
                    content="</body>";
                    bw.write(content + "\r\n");
                    content="</html>";
                    bw.write(content + "\r\n");
                    bw.close();
                    }
                } 
            catch (IOException ex) 
                {
                Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        else
            {
            System.out.println("ABORTED!!!");
            }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void key1(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_key1
        char c = evt.getKeyChar();
        
        if (c==',' || c=='.' || c=='0' || c=='1' || c=='2' || c=='3' || c=='4' || c=='5' || c=='6' || c=='7' || c=='8' || c=='9')
            {
            if(c==',')
                {
                evt.setKeyChar('.');
                }
            else
                {
                evt.setKeyChar(c);
                }
            }
        else
            {
            evt.setKeyChar('\r');
            }
    }//GEN-LAST:event_key1

    private void key2(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_key2
        char c = evt.getKeyChar();
        
        if (c=='0' || c=='1' || c=='2' || c=='3' || c=='4' || c=='5' || c=='6' || c=='7' || c=='8' || c=='9')
            {
            evt.setKeyChar(c);
            }
        else
            {
            evt.setKeyChar('\r');
            }
    }//GEN-LAST:event_key2

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        lang=1;
        
        jLabel1.setText("Version 2.1. Courriel : mosaicgui.imbert@gmail.com");
        jLabel2.setText("Etape 1 : Charger une image");
        jLabel3.setText("Etape 2 : Définir la palette à utiliser");
        jLabel4.setText("Etape 3 : Définir les paramètres de votre projet");
        if (filepal==1) jLabel5.setText(fileinfo.getName()+ " : " + nombrecouleurs + " couleurs disponibles !");
        jLabel6.setText("Etape 4 : Choix du filtre pour générer votre patron");
        jLabel7.setText("Longueur maximale de votre projet (en mm) :");
        jLabel8.setText("Taille des perles, mosaiques... (en mm) :");
        jLabel9.setText("Taille des patrons (en nombre de motifs par ligne et colonne) :");
        jLabel11.setText("(0 = taille originale. Idéal pour le mode \"Figurines\")");
        
        jButton1.setText("Ouvrir une image");
        jButton2.setText("Ouvrir une palette");
        jButton3.setText("Figurines");
        jButton4.setText("Photos");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        lang=2;
        
        jLabel1.setText("Version 2.1. Mail : mosaicgui.imbert@gmail.com");
        jLabel2.setText("Step 1 : Load a picture");
        jLabel3.setText("Step 2 : Choose your color chart");
        jLabel4.setText("Step 3 : Configure your project");
        if (filepal==1) jLabel5.setText(fileinfo.getName()+ " : " + nombrecouleurs + " colors available !");
        jLabel6.setText("Step 4 : Choose a filter to generate your project");
        jLabel7.setText("Maximum width of your project (in mm) :");
        jLabel8.setText("Size of your beads/mosaics... (in mm) :");
        jLabel9.setText("Size of different patterns (by line and columns) :");
        jLabel11.setText("(0 = original size. Very usefull for \"Sprites\" mode)");
        
        jButton1.setText("Load a picture");
        jButton2.setText("Open a color chart");
        jButton3.setText("Sprites");
        jButton4.setText("Photos");
    }//GEN-LAST:event_jButton6ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
        {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mosaic_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mosaic_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mosaic_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mosaic_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
            {
            public void run() 
                {
                try {
                    new Mosaic_GUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Mosaic_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
            }
            );
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
    }
